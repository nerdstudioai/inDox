# Base Image
FROM python:3.9-slim-bullseye

# Set environment variables early as they rarely change
ENV LANG=en_US.UTF-8 \
    LANGUAGE=en_US:en \
    LC_ALL=en_US.UTF-8 \
    PATH="/opt/venv/bin:$PATH" \
    PYTHONPATH="/app:${PYTHONPATH:-}" \
    PIP_CACHE_DIR=/app/cache \
    XDG_CACHE_HOME=/app/cache \
    MODEL_CACHE_DIR=/app/cache/models \
    TORCH_HOME=/app/cache/torch

# Install general system dependencies including build essentials
# Group all apt commands in a single RUN to reduce layers
RUN apt-get update && apt-get install -y --no-install-recommends \
    build-essential \
    ninja-build \
    cmake \
    libgl1-mesa-glx \
    libglib2.0-0 \
    gcc \
    g++ \
    python3-dev \
    git \
    locales \
    && locale-gen en_US.UTF-8 \
    && rm -rf /var/lib/apt/lists/*

# Create virtual environment and directories
RUN python -m venv /opt/venv \
    && mkdir -p /app/app $XDG_CACHE_HOME $MODEL_CACHE_DIR $TORCH_HOME $PIP_CACHE_DIR

# Create a non-root user and set proper permissions
RUN useradd -m -u 1000 appuser && \
    chown -R appuser:appuser /app /opt/venv

# Switch to the non-root user
USER appuser

# Set the working directory
WORKDIR /app

# Copy only requirements files first
COPY --chown=appuser:appuser requirements-base.txt /app/

# Install dependencies with pip
RUN pip install --no-cache-dir --upgrade pip && \
    pip install --no-cache-dir -r requirements-base.txt

# Copy the application files
COPY --chown=appuser:appuser api.py /app/app/

# Create an init.py to make it a proper package
RUN touch /app/app/__init__.py

# Expose the port
EXPOSE 8000

# Run the FastAPI app
CMD ["uvicorn", "api:app", "--host", "0.0.0.0", "--port", "8000"]