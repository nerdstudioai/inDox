version: "3.8"

services:
  detr:
    build:
      context: .
      dockerfile: models/detr/detr.dockerfile
    ports:
      - "8001:8000"
    volumes:
      - ./data:/app/data:ro
      - cache:/app/cache
    environment:
      - MODEL_TYPE=detr
      - MODEL_CACHE_DIR=/app/cache
    deploy:
      resources:
        limits:
          memory: 4G
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped
    networks:
      - model-network

  detectron2:
    build:
      context: .
      dockerfile: models/detectron2/detectron2.dockerfile
    ports:
      - "8002:8000"
    volumes:
      - ./data:/app/data:ro
      - cache:/app/cache
    environment:
      - MODEL_TYPE=detectron2
      - MODEL_CACHE_DIR=/app/cache
    deploy:
      resources:
        limits:
          memory: 4G
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped
    networks:
      - model-network

  detrclip:
    build:
      context: .
      dockerfile: models/detrclip/detrclip.dockerfile
    ports:
      - "8003:8000"
    volumes:
      - ./data:/app/data:ro
      - cache:/app/cache
    environment:
      - MODEL_TYPE=detrclip
      - MODEL_CACHE_DIR=/app/cache
    deploy:
      resources:
        limits:
          memory: 4G
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped
    networks:
      - model-network

  groundingdino:
    build:
      context: .
      dockerfile: models/groundingdino/groundingdino.dockerfile
    ports:
      - "8004:8000"
    volumes:
      - ./data:/app/data:ro
      - cache:/app/cache
    environment:
      - MODEL_TYPE=groundingdino
      - MODEL_CACHE_DIR=/app/cache
    deploy:
      resources:
        limits:
          memory: 4G
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped
    networks:
      - model-network

  kosmos2:
    build:
      context: .
      dockerfile: models/kosmos2/kosmos2.dockerfile
    ports:
      - "8005:8000"
    volumes:
      - ./data:/app/data:ro
      - cache:/app/cache
    environment:
      - MODEL_TYPE=kosmos2
      - MODEL_CACHE_DIR=/app/cache
    deploy:
      resources:
        limits:
          memory: 4G
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped
    networks:
      - model-network

  owlvit:
    build:
      context: .
      dockerfile: models/owlvit/owlvit.dockerfile
    ports:
      - "8006:8000"
    volumes:
      - ./data:/app/data:ro
      - cache:/app/cache
    environment:
      - MODEL_TYPE=owlvit
      - MODEL_CACHE_DIR=/app/cache
    deploy:
      resources:
        limits:
          memory: 4G
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped
    networks:
      - model-network

  rtdetr:
    build:
      context: .
      dockerfile: models/rtdetr/rtdetr.dockerfile
    ports:
      - "8007:8000"
    volumes:
      - ./data:/app/data:ro
      - cache:/app/cache
    environment:
      - MODEL_TYPE=rtdetr
      - MODEL_CACHE_DIR=/app/cache
    deploy:
      resources:
        limits:
          memory: 4G
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped
    networks:
      - model-network

  sam2:
    build:
      context: .
      dockerfile: models/sam2/sam2.dockerfile
    ports:
      - "8008:8000"
    volumes:
      - ./data:/app/data:ro
      - cache:/app/cache
    environment:
      - MODEL_TYPE=sam2
      - MODEL_CACHE_DIR=/app/cache
    deploy:
      resources:
        limits:
          memory: 4G
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped
    networks:
      - model-network

  yolov5:
    build:
      context: .
      dockerfile: models/yolov5/yolov5.dockerfile
    ports:
      - "8009:8000"
    volumes:
      - ./data:/app/data:ro
      - cache:/app/cache
    environment:
      - MODEL_TYPE=yolov5
      - MODEL_CACHE_DIR=/app/cache
    deploy:
      resources:
        limits:
          memory: 4G
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped
    networks:
      - model-network

  yolov6:
    build:
      context: .
      dockerfile: models/yolov6/yolov6.dockerfile
    ports:
      - "8010:8000"
    volumes:
      - ./data:/app/data:ro
      - cache:/app/cache
    environment:
      - MODEL_TYPE=yolov6
      - MODEL_CACHE_DIR=/app/cache
    deploy:
      resources:
        limits:
          memory: 4G
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped
    networks:
      - model-network

  yolov7:
    build:
      context: .
      dockerfile: models/yolov7/yolov7.dockerfile
    ports:
      - "8011:8000"
    volumes:
      - ./data:/app/data:ro
      - cache:/app/cache
    environment:
      - MODEL_TYPE=yolov7
      - MODEL_CACHE_DIR=/app/cache
    deploy:
      resources:
        limits:
          memory: 4G
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped
    networks:
      - model-network

  yolov8:
    build:
      context: .
      dockerfile: models/yolov8/yolov8.dockerfile
    ports:
      - "8012:8000"
    volumes:
      - ./data:/app/data:ro
      - cache:/app/cache
    environment:
      - MODEL_TYPE=yolov8
      - MODEL_CACHE_DIR=/app/cache
    deploy:
      resources:
        limits:
          memory: 4G
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped
    networks:
      - model-network

  yolov10:
    build:
      context: .
      dockerfile: models/yolov10/yolov10.dockerfile
    ports:
      - "8013:8000"
    volumes:
      - ./data:/app/data:ro
      - cache:/app/cache
    environment:
      - MODEL_TYPE=yolov10
      - MODEL_CACHE_DIR=/app/cache
    deploy:
      resources:
        limits:
          memory: 4G
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped
    networks:
      - model-network

  yolo11:
    build:
      context: .
      dockerfile: models/yolo11/yolo11.dockerfile
    ports:
      - "8014:8000"
    volumes:
      - ./data:/app/data:ro
      - cache:/app/cache
    environment:
      - MODEL_TYPE=yolo11
      - MODEL_CACHE_DIR=/app/cache
    deploy:
      resources:
        limits:
          memory: 4G
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped
    networks:
      - model-network

  yolox:
    build:
      context: .
      dockerfile: models/yolox/yolox.dockerfile
    ports:
      - "8015:8000"
    volumes:
      - ./data:/app/data:ro
      - cache:/app/cache
    environment:
      - MODEL_TYPE=yolox
      - MODEL_CACHE_DIR=/app/cache
    deploy:
      resources:
        limits:
          memory: 4G
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped
    networks:
      - model-network

  groundedsam2:
    build:
      context: .
      dockerfile: models/groundedsam2/groundedsam2.dockerfile
    ports:
      - "8016:8000"
    volumes:
      - ./data:/app/data:ro
      - cache:/app/cache
    environment:
      - MODEL_TYPE=groundedsam2
      - MODEL_CACHE_DIR=/app/cache
    deploy:
      resources:
        limits:
          memory: 4G
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped
    networks:
      - model-network

  groundedsam2florence2:
    build:
      context: .
      dockerfile: models/groundedsam2florence2/groundedsam2florence2.dockerfile
    ports:
      - "8017:8000"
    volumes:
      - ./data:/app/data:ro
      - cache:/app/cache
    environment:
      - MODEL_TYPE=groundedsam2florence2
      - MODEL_CACHE_DIR=/app/cache
    deploy:
      resources:
        limits:
          memory: 4G
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped
    networks:
      - model-network

  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - detr
      - detectron2
      - detrclip
      - groundingdino
      - kosmos2
      - owlvit
      - rtdetr
      - sam2
      - yolov5
      - yolov6
      - yolov7
      - yolov8
      - yolov10
      - yolo11
      - yolox
      - groundedsam2
      - groundedsam2florence2
    networks:
      - model-network
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

volumes:
  cache:

networks:
  model-network:
    driver: bridge
