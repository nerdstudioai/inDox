---
title: Unstructured Split
jupyter: python3
---


Here, we will explore how to work with Indox Retrieval Augmentation. First, if you are using OpenAI, you should set your OpenAI key as an environment variable.


```{python}
#| ExecuteTime: {end_time: '2024-06-09T05:05:05.940442Z', start_time: '2024-06-09T05:05:05.916843Z'}
import os
from dotenv import load_dotenv

load_dotenv()
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
```

### Creating an instance of IndoxTetrivalAugmentation

To effectively utilize the Indox Retrieval Augmentation capabilities, you must first create an instance of the IndoxRetrievalAugmentation class. This instance will allow you to access the methods and properties defined within the class, enabling the augmentation and retrieval functionalities.

```{python}
#| ExecuteTime: {end_time: '2024-06-09T05:05:05.988214Z', start_time: '2024-06-09T05:05:05.942450Z'}
from indox import IndoxRetrievalAugmentation
indox = IndoxRetrievalAugmentation()
```

### Generating response using OpenAI's language models 
OpenAIQA class is used to handle question-answering task using OpenAI's language models. This instance creates OpenAiEmbedding class to specifying embedding model. Here ChromaVectorStore handles the storage and retrieval of vector embeddings by specifying a collection name and sets up a vector store where text embeddings can be stored and queried.

```{python}
#| ExecuteTime: {end_time: '2024-06-09T05:05:23.229746Z', start_time: '2024-06-09T05:05:15.047165Z'}
from indox.llms import OpenAiQA
from indox.embeddings import OpenAiEmbedding
openai_qa = OpenAiQA(api_key=OPENAI_API_KEY, model="gpt-3.5-turbo-0125")
embed_openai = OpenAiEmbedding(api_key=OPENAI_API_KEY,model="text-embedding-3-small")

from indox.vector_stores import ChromaVectorStore
db = ChromaVectorStore(collection_name="sample",embedding=embed_openai)
indox.connect_to_vectorstore(vectorstore_database=db)
```

### load and preprocess data
This part of code demonstrates how to load and preprocess text data from a file, split it into chunks, and store these chunks in the vector store that was set up previously.

```{python}
#| ExecuteTime: {end_time: '2024-06-09T05:05:23.234626Z', start_time: '2024-06-09T05:05:23.231753Z'}
file_path = "sample.txt"
```

```{python}
#| ExecuteTime: {end_time: '2024-06-09T05:05:42.358388Z', start_time: '2024-06-09T05:05:23.235633Z'}
from indox.data_loader_splitter import UnstructuredLoadAndSplit
loader_splitter = UnstructuredLoadAndSplit(file_path=file_path,max_chunk_size=400)
docs = loader_splitter.load_and_chunk()
```

```{python}
#| ExecuteTime: {end_time: '2024-06-09T05:05:42.366084Z', start_time: '2024-06-09T05:05:42.359397Z'}
docs
```

```{python}
#| ExecuteTime: {end_time: '2024-06-09T05:05:45.415988Z', start_time: '2024-06-09T05:05:42.368097Z'}
indox.store_in_vectorstore(docs=docs)
```

### Retrieve relevant information and generate an answer
The main purpose of these lines is to perform a query on the vector store to retrieve the most relevant information (top_k=5) and generate an answer using the language model.

```{python}
#| ExecuteTime: {end_time: '2024-06-09T05:05:45.421284Z', start_time: '2024-06-09T05:05:45.416996Z'}
query = "How Cinderella reach her happy ending?"
retriever = indox.QuestionAnswer(vector_database=db, llm=openai_qa, top_k=5)
```

invoke(query) method sends the query to the retriever, which searches the vector store for relevant text chunks and uses the language model to generate a response based on the retrieved information.
Context property retrieves the context or the detailed information that the retriever used to generate the answer to the query. It provides insight into how the query was answered by showing the relevant text chunks and any additional information used.

```{python}
#| ExecuteTime: {end_time: '2024-06-09T05:05:48.940349Z', start_time: '2024-06-09T05:05:45.422293Z'}
retriever.invoke(query)
retriever.context
```

### With AgenticRag

AgenticRag stands for Agentic Retrieval-Augmented Generation. This concept combines retrieval-based methods and generation-based methods in natural language processing (NLP). The key idea is to enhance the generative capabilities of a language model by incorporating relevant information retrieved from a database or a vector store. 
 AgenticRag is designed to provide more contextually rich and accurate responses by utilizing external knowledge sources. It retrieves relevant pieces of information (chunks) from a vector store based on a query and then uses a language model to generate a comprehensive response that incorporates this retrieved information.

```{python}
#| ExecuteTime: {end_time: '2024-06-09T05:05:55.712801Z', start_time: '2024-06-09T05:05:48.941354Z'}
agent = indox.AgenticRag(llm=openai_qa,vector_database=db,top_k=5)
agent.run(query)
```


